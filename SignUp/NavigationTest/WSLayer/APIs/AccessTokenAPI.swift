//
// AccessTokenAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
// swiftlint:disable function_parameter_count
protocol AccessTokenAPI {

}
extension AccessTokenAPI {
    
    func getToken(clientId: String, clientSecret: String, grantType: String, username: String, password: String, withHandler handler: @escaping ( _ appToken: AccessToken?) -> Void) {
        
        

        let path = "/o/token/"
        let URLString = "https://reachtheparty.info" + path
        let headers = Configuration.customHeadersToken
        var nillableParameters: [String: Any?] = [:]
        
        nillableParameters = [
                        "client_id": clientId.encodeToJSON(),
                        "client_secret": clientSecret.encodeToJSON(),
                        "grant_type": grantType,
                        "username": username.encodeToJSON(),
                        "password": password.encodeToJSON()
                    ]
        
//        nillableParameters[grantTypeKey] = Configuration.grantType()
//        nillableParameters[userNameKey] = Configuration.userName().encodeToJSON()
//        nillableParameters[passwordKey] = Configuration.userPassowrd().encodeToJSON()
//        nillableParameters[clientIdKey] = Configuration.clientId().encodeToJSON()
//        nillableParameters[clientSecretkey] = Configuration.clientSecret().encodeToJSON()
//
        let parameters = APIHelper.rejectNil(source: nillableParameters)
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: "POST", requestParameters: convertedParameters, requestEncoding: URLEncoding.default, requestHeaders: headers, showLoader: false)
        JSONRequest(requestBuilder: requestBuilder) { (response, _) in
            print("response \(response)")
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    handler(nil)
                    return
                }
                print("parameters dwsd \(jsonResponse)")
                let accessToken = AccessToken(JSON: jsonResponse)
                handler(accessToken)
            } else {
                guard let jsonResponse = response.result.value else {
                    handler(nil)
                    return
                }
                print("failed \(jsonResponse)")
                handler(nil)
            }
        }
        
//        let path = "/o/token/"
//        let URLString = "https://reachtheparty.info" + path
//        var nillableParameters: [String: Any?] = [:]
//        let headers = Configuration.customHeadersToken
//
//        nillableParameters = [
//            "client_id": clientId,
//            "client_secret": clientSecret,
//            "grant_type": grantType,
//            "username": username,
//            "password": password
//        ]
//
//        let parameters = APIHelper.rejectNil(source: nillableParameters)
//        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
//        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: "POST", requestParameters: convertedParameters, requestHeaders: nil, showLoader: true)
//
//        JSONRequest(requestBuilder: requestBuilder) { (response, _) in
//            if response.result.isSuccess {
//                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
//                    handler(nil)
//                    return
//                }
//                print("jsonResponse \(jsonResponse)")
//                print("jsonResponse")
//                let accessToken = AccessToken(JSON: jsonResponse)
//                handler(accessToken)
//            } else {
//                handler(nil)
//            }
//        }
    }
    
    
    /*
    - parameter clientId: (form) Client ID. 
    - parameter clientSecret: (form) Client Secret. 
    - parameter grantType: (form) Grant Type. 
    - parameter username: (form) User Name. 
    - parameter password: (form) Password. 
    - parameter handler: completion handler to receive the data
    */
//    func getToken(_ clientId: String, clientSecret: String, grantType: String, username: String, password: String, withHandler handler: @escaping (_ responseData: NSIResponse<AccessToken>?) -> Void) {
//        let path = "/o/token/"
//        let URLString = "https://reachtheparty.info" + path
//            //Configuration.BaseURL() + path
//        let headers = Configuration.customHeadersToken
//        let nillableParameters: [String:Any?] = [
//        "client_id": clientId,
//        "client_secret": clientSecret,
//        "grant_type": grantType,
//        "username": username,
//        "password": password
//       ]
//        let parameters = APIHelper.rejectNil(source: nillableParameters)
//        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
//        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: "POST", requestParameters: convertedParameters, requestHeaders: headers, showLoader: true)
//        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
//            if response.result.isSuccess {
//                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
//                handler(NSIResponse<AccessToken>(.nilResponse))
//                return
//            }
//                print("jsonResponse \(jsonResponse)")
//             var nsiResponse = NSIResponse<AccessToken>(JSON: jsonResponse)
//            nsiResponse?.hasCache = isLoadedFromCache
//            handler(nsiResponse)
//
//            } else {
//                handler(NSIResponse<AccessToken>(.invalidStatus))
//            }
//        }
//    }
}
