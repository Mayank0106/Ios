// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import ObjectMapper

// Service Error type
enum ServiceError: Error {
case nilResponse
case invalidStatus
case unknownError(errorMessage: String)
}

struct NSIResponse<T>: Mappable {
    var status: Int
    var message: String
    var error: ServiceError?
    var hasCache = false
    var response: T?
    init(_ serviceError: ServiceError, _ isLoadedFromCache: Bool = false){
        status = -1
        message = "default message"
        error = serviceError
        hasCache = isLoadedFromCache
    }
    init?(map: Map) {
        status = -1
        message = "default message"
    }
    func getMessage(map: Map) -> String {
        var tMesg1: String = ""
        tMesg1 <- map["message"]
        if tMesg1.count == 0 {
            var tempDic: [String: Any] = ["": [["":""] as Any]]
            tempDic <- map["message"]
            if let tMesg2 = tempDic[tempDic.keys.first!] as? String {
                return tMesg2
            } else {
                guard let tMesg3 = tempDic[tempDic.keys.first!] as? [String], tempDic.count > 0 else { return "" }
                return tMesg3.first!
            }
        } else {
            return tMesg1
        }
    }
    mutating func mapping(map: Map) {
        status <- map["status"]
        message = self.getMessage(map: map)
        switch T.self {
       
            case is AccessToken.Type: response = Mapper<AccessToken>().map(JSONObject: map["response"].currentValue) as? T
            case is Array<AccessToken>.Type: response = Mapper<AccessToken>().mapArray(JSONObject: map["response"].currentValue) as? T
            case is UserModel.Type: response = Mapper<UserModel>().map(JSONObject: map["response"].currentValue) as? T
            case is Array<UserModel>.Type: response = Mapper<UserModel>().mapArray(JSONObject: map["response"].currentValue) as? T
//            case is Property.Type: response = Mapper<Property>().map(JSONObject: map["response"].currentValue) as? T
//            case is Array<Property>.Type: response = Mapper<Property>().mapArray(JSONObject: map["response"].currentValue) as? T
//            case is PropertyList.Type: response = Mapper<PropertyList>().map(JSONObject: map["response"].currentValue) as? T
//            case is Array<PropertyList>.Type: response = Mapper<PropertyList>().mapArray(JSONObject: map["response"].currentValue) as? T
//            case is PropertyModel.Type: response = Mapper<PropertyModel>().map(JSONObject: map["response"].currentValue) as? T
//            case is Array<PropertyModel>.Type: response = Mapper<PropertyModel>().mapArray(JSONObject: map["response"].currentValue) as? T
//            case is User.Type: response = Mapper<User>().map(JSONObject: map["response"].currentValue) as? T
//            case is Array<User>.Type: response = Mapper<User>().mapArray(JSONObject: map["response"].currentValue) as? T
            default: response <- map["response"]
        }
    }
}
