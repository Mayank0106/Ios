// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import ObjectMapper

// Service Error type
enum ServiceError: Error {
    case nilResponse
    case invalidStatus
    case unknownError(errorMessage: String)
}

struct NSIResponse<T>: Mappable {
    var status: Int
    var message: String
    var error: ServiceError?
    var hasCache = false
    var response: T?
    init(_ serviceError: ServiceError, _ isLoadedFromCache: Bool = false) {
        status = -1
        message = "NetworkError".localized
        error = serviceError
        hasCache = isLoadedFromCache
    }
    init?(map: Map) {
        status = -1
        message = "NetworkError".localized
    }
    func getMessage(map: Map) -> String {
        var tMesg1: String = ""
        tMesg1 <- map["message"]
        if tMesg1.count == 0 {
            var tempDic: [String: Any] = ["": [["": ""] as Any]]
            tempDic <- map["message"]
            if let tMesg2 = tempDic[tempDic.keys.first!] as? String {
                return tMesg2
            } else {
                guard let tMesg3 = tempDic[tempDic.keys.first!] as? [String], tempDic.count > 0 else { return "" }
                return tMesg3.first!
            }
        } else {
            return tMesg1
        }
    }
    mutating func mapping(map: Map) {
        status <- map["status"]
        message = self.getMessage(map: map)
        switch T.self {
        case is UserModel.Type: response = Mapper<UserModel>().map(JSONObject: map["response"].currentValue) as? T
        case is Array<UserModel>.Type: response = Mapper<UserModel>().mapArray(JSONObject: map["response"].currentValue) as? T

        case is UserDeviceModel.Type: response = Mapper<UserDeviceModel>().map(JSONObject: map["response"].currentValue) as? T
        case is Array<UserDeviceModel>.Type: response = Mapper<UserDeviceModel>().mapArray(JSONObject: map["response"].currentValue) as? T

        case is ProvinceCityModel.Type: response = Mapper<ProvinceCityModel>().map(JSONObject: map["response"].currentValue) as? T
        case is Array<ProvinceCityModel>.Type: response = Mapper<ProvinceCityModel>().mapArray(JSONObject: map["response"].currentValue) as? T

        case is SocialUserModel.Type: response = Mapper<SocialUserModel>().map(JSONObject: map["response"].currentValue) as? T
        case is Array<SocialUserModel>.Type: response = Mapper<SocialUserModel>().mapArray(JSONObject: map["response"].currentValue) as? T

        case is MyEventModel.Type: response = Mapper<MyEventModel>().map(JSONObject: map["response"].currentValue) as? T
        case is Array<MyEventModel>.Type: response = Mapper<MyEventModel>().mapArray(JSONObject: map["response"].currentValue) as? T

        case is FriendModel.Type: response = Mapper<FriendModel>().map(JSONObject: map["response"].currentValue) as? T
        case is Array<FriendModel>.Type: response = Mapper<FriendModel>().mapArray(JSONObject: map["response"].currentValue) as? T

        case is PaginationModel.Type: response = Mapper<PaginationModel>().map(JSONObject: map["response"].currentValue) as? T
        case is Array<PaginationModel>.Type: response = Mapper<PaginationModel>().mapArray(JSONObject: map["response"].currentValue) as? T

        case is PaginationFeedsModel.Type: response = Mapper<PaginationFeedsModel>().map(JSONObject: map["response"].currentValue) as? T
        case is Array<PaginationFeedsModel>.Type: response = Mapper<PaginationFeedsModel>().mapArray(JSONObject: map["response"].currentValue) as? T

        case is ProfileModel.Type: response = Mapper<ProfileModel>().map(JSONObject: map["response"].currentValue) as? T
        case is Array<ProfileModel>.Type: response = Mapper<ProfileModel>().mapArray(JSONObject: map["response"].currentValue) as? T
            
        case is VersionUpdate.Type: response = Mapper<VersionUpdate>().map(JSONObject: map["response"].currentValue) as? T
        case is Array<VersionUpdate>.Type: response = Mapper<VersionUpdate>().mapArray(JSONObject: map["response"].currentValue) as? T

        default: response <- map["response"]
        }
    }
}
