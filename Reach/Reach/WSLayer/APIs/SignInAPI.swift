//
// SignInAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire

// swiftlint:disable function_parameter_count
protocol SignInAPI {

}
extension SignInAPI {
    /**
     sign in
     - parameter body: (body) User device model
     - parameter handler: completion handler to receive the data
     - parameter failureHandler: failure handler to receive the error objects
     */
    func signIn(_ body: UserDeviceModel, withHandler handler: @escaping (_ response: NSIResponse<UserModel>?, _ isResponseFromCache: Bool?) -> Void, failureHandler: @escaping (_ error: NSIError) -> Void) {
        let path = "/api/accounts/signin/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeaders
        let parameters = body.encodeToJSON()
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: Alamofire.HTTPMethod.init(rawValue: "POST")!.rawValue, requestParameters: convertedParameters, requestEncoding: JSONEncoding.default, requestHeaders: headers, showLoader: false, requestCache: .RequestFromURLNoCache, requestShouldDisableInteraction: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    failureHandler(NSIError(error: response.result.error, response: response.result.value))
                    return
                }
                let nsiResponse = NSIResponse<UserModel>(JSON: jsonResponse)
                handler(nsiResponse, isLoadedFromCache)
            } else {
                var error = NSIError()
                error.error = response.result.error
                do {
                    let jsonResponse = try JSONSerialization.jsonObject(with: response.data!, options: .allowFragments)
                    error.response = jsonResponse
                } catch {}
                failureHandler(error)
            }
        }
    }

    /**
     forgot password
     - parameter body: (body) User model
     - parameter handler: completion handler to receive the data
     - parameter failureHandler: failure handler to receive the error objects
     */
    func forgotPassword(_ body: UserModel, withHandler handler: @escaping (_ response: NSIResponse<Any>?, _ isResponseFromCache: Bool?) -> Void, failureHandler: @escaping (_ error: NSIError) -> Void) {
        let path = "/api/accounts/forgotpassword/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeaders
        let parameters = body.encodeToJSON()
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: Alamofire.HTTPMethod.init(rawValue: "POST")!.rawValue, requestParameters: convertedParameters, requestEncoding: JSONEncoding.default, requestHeaders: headers, showLoader: false, requestCache: .RequestFromURLNoCache, requestShouldDisableInteraction: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    failureHandler(NSIError(error: response.result.error, response: response.result.value))
                    return
                }
                let nsiResponse = NSIResponse<Any>(JSON: jsonResponse)
                handler(nsiResponse, isLoadedFromCache)
            } else {
                var error = NSIError()
                error.error = response.result.error
                do {
                    let jsonResponse = try JSONSerialization.jsonObject(with: response.data!, options: .allowFragments)
                    error.response = jsonResponse
                } catch {}
                failureHandler(error)
            }
        }
    }

    /**
     Sign up
     - parameter body: (body) User model
     - parameter handler: completion handler to receive the data
     - parameter failureHandler: failure handler to receive the error objects
     */
    func signUp(_ body: UserModel, withHandler handler: @escaping (_ response: NSIResponse<UserModel>?, _ isResponseFromCache: Bool?) -> Void, failureHandler: @escaping (_ error: NSIError) -> Void) {
//        let imageData = body.profileImage
//        let objUserModel = body
//        objUserModel.profileImage = nil
        let path = "/api/accounts/register/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeaders
        let parameters = body.encodeToJSON()
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)

        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: Alamofire.HTTPMethod.init(rawValue: "POST")!.rawValue, requestParameters: convertedParameters, requestEncoding: JSONEncoding.default, requestHeaders: headers, showLoader: false, requestCache: .RequestFromURLNoCache, requestShouldDisableInteraction: true)

        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    failureHandler(NSIError(error: response.result.error, response: response.result.value))
                    return
                }
                let nsiResponse = NSIResponse<UserModel>(JSON: jsonResponse)
                handler(nsiResponse, isLoadedFromCache)
            } else {
                var error = NSIError()
                error.error = response.result.error
                do {
                    let jsonResponse = try JSONSerialization.jsonObject(with: response.data!, options: .allowFragments)
                    error.response = jsonResponse
                } catch {}
                failureHandler(error)
            }
        }

//        Alamofire.upload(multipartFormData: { (multipartFormData) in
//            if let data = imageData {
//                multipartFormData.append(data, withName: "profile_image", fileName: "signature.jpeg", mimeType: "image/jpeg")
//            }
//            if let params = convertedParameters {
//                for (key, value) in params {
//                    var strVal = ""
//                    if let val = value as? String {
//                        strVal = val
//                    } else {
//                        strVal = "\(value)"
//                    }
//
//                    if let data = strVal.data(using: String.Encoding.utf8) {
//                        multipartFormData.append(data, withName: key)
//                    }
//                }
//            }
//
//        }, to: URLString, headers: headers, encodingCompletion: { encodingResult in
//            switch encodingResult {
//            case .success(let upload, _, _):
//
//                upload.validate()
//                upload.responseJSON { response in
//                    if response.result.isSuccess {
//                        guard let jsonResponse = response.result.value as? [String: AnyObject] else {
//                            failureHandler(NSIError(error: response.result.error, response: response.result.value))
//                            return
//                        }
//                        let nsiResponse = NSIResponse<UserModel>(JSON: jsonResponse)
//                        handler(nsiResponse, false)
//                    } else {
//                        var error = NSIError()
//                        error.error = response.result.error
//                        do {
//                            let jsonResponse = try JSONSerialization.jsonObject(with: response.data!, options: .allowFragments)
//                            error.response = jsonResponse
//                        } catch {}
//                        failureHandler(error)
//                    }
//                }
//            case .failure(let encodingError):
//                print(encodingError)
//                var error = NSIError()
//                error.error = encodingError
//                failureHandler(error)
//            }
//        })
    }

    /**
     Validate username
     - parameter body: (body) User model
     - parameter handler: completion handler to receive the data
     - parameter failureHandler: failure handler to receive the error objects
     */
    func checkIfUsernameAvailable(_ body: UserModel, withHandler handler: @escaping (_ response: NSIResponse<Any>?, _ isResponseFromCache: Bool?) -> Void, failureHandler: @escaping (_ error: NSIError) -> Void) {
        let path = "/api/accounts/validateusername/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeaders
        let parameters = body.encodeToJSON()
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: Alamofire.HTTPMethod.init(rawValue: "POST")!.rawValue, requestParameters: convertedParameters, requestEncoding: JSONEncoding.default, requestHeaders: headers, showLoader: false, requestCache: .RequestFromURLNoCache, requestShouldDisableInteraction: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    failureHandler(NSIError(error: response.result.error, response: response.result.value))
                    return
                }
                let nsiResponse = NSIResponse<Any>(JSON: jsonResponse)
                handler(nsiResponse, isLoadedFromCache)
            } else {
                var error = NSIError()
                error.error = response.result.error
                do {
                    let jsonResponse = try JSONSerialization.jsonObject(with: response.data!, options: .allowFragments)
                    error.response = jsonResponse
                } catch {}
                failureHandler(error)
            }
        }
    }

    /**
     State listing
     - parameter handler: completion handler to receive the data
     - parameter failureHandler: failure handler to receive the error objects
     */
    func listDownAllStates(withHandler handler: @escaping (_ response: NSIResponse<[ProvinceCityModel]>?, _ isResponseFromCache: Bool?) -> Void, failureHandler: @escaping (_ error: NSIError) -> Void) {
        let path = "/api/app/state/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeaders
        let nillableParameters: [String: Any?] = [:]
        let parameters = APIHelper.rejectNil(source: nillableParameters)
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: Alamofire.HTTPMethod.init(rawValue: "GET")!.rawValue, requestParameters: convertedParameters, requestEncoding: JSONEncoding.default, requestHeaders: headers, showLoader: false, requestCache: .RequestFromURLNoCache, requestShouldDisableInteraction: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    failureHandler(NSIError(error: response.result.error, response: response.result.value))
                    return
                }
                let nsiResponse = NSIResponse<[ProvinceCityModel]>(JSON: jsonResponse)
                handler(nsiResponse, isLoadedFromCache)
            } else {
                var error = NSIError()
                error.error = response.result.error
                do {
                    let jsonResponse = try JSONSerialization.jsonObject(with: response.data!, options: .allowFragments)
                    error.response = jsonResponse
                } catch {}
                failureHandler(error)
            }
        }
    }

    /**
     City listing
     - parameter province: (query) Province selected
     - parameter handler: completion handler to receive the data
     - parameter failureHandler: failure handler to receive the error objects
     */
    func listDownAllCities(_ province: String, withHandler handler: @escaping (_ response: NSIResponse<[ProvinceCityModel]>?, _ isResponseFromCache: Bool?) -> Void, failureHandler: @escaping (_ error: NSIError) -> Void) {

        let path = "/api/app/city/\(province)/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeaders

        let nillableParameters: [String: Any?] = [:]
        let parameters = APIHelper.rejectNil(source: nillableParameters)
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)

        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: Alamofire.HTTPMethod.init(rawValue: "GET")!.rawValue, requestParameters: convertedParameters, requestEncoding: URLEncoding.default, requestHeaders: headers, showLoader: true, requestCache: .RequestFromURLNoCache, requestShouldDisableInteraction: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    failureHandler(NSIError(error: response.result.error, response: response.result.value))
                    return
                }
                let nsiResponse = NSIResponse<[ProvinceCityModel]>(JSON: jsonResponse)
                handler(nsiResponse, isLoadedFromCache)
            } else {
                var error = NSIError()
                error.error = response.result.error
                do {
                    let jsonResponse = try JSONSerialization.jsonObject(with: response.data!, options: .allowFragments)
                    error.response = jsonResponse
                } catch {}
                failureHandler(error)
            }
        }
    }

    /**
     Verify Email
     - parameter body: (body) User model
     - parameter handler: completion handler to receive the data
     - parameter failureHandler: failure handler to receive the error objects
     */
    func verifyEmailID(_ body: UserModel, withHandler handler: @escaping (_ response: NSIResponse<Any>?, _ isResponseFromCache: Bool?) -> Void, failureHandler: @escaping (_ error: NSIError) -> Void) {
        let path = "/api/accounts/emailverify/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeaders
        let parameters = body.encodeToJSON()
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: Alamofire.HTTPMethod.init(rawValue: "POST")!.rawValue, requestParameters: convertedParameters, requestEncoding: JSONEncoding.default, requestHeaders: headers, showLoader: false, requestCache: .RequestFromURLNoCache, requestShouldDisableInteraction: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    failureHandler(NSIError(error: response.result.error, response: response.result.value))
                    return
                }
                let nsiResponse = NSIResponse<Any>(JSON: jsonResponse)
                handler(nsiResponse, isLoadedFromCache)
            } else {
                var error = NSIError()
                error.error = response.result.error
                do {
                    let jsonResponse = try JSONSerialization.jsonObject(with: response.data!, options: .allowFragments)
                    error.response = jsonResponse
                } catch {}
                failureHandler(error)
            }
        }
    }

    /**
     Validate Mobile Number
     - parameter body: (body) User model
     - parameter handler: completion handler to receive the data
     - parameter failureHandler: failure handler to receive the error objects
     */
    func validateMobileNumber(_ body: UserModel, withHandler handler: @escaping (_ response: NSIResponse<Any>?, _ isResponseFromCache: Bool?) -> Void, failureHandler: @escaping (_ error: NSIError) -> Void) {
        let path = "/api/accounts/validatemobile/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeaders
        let parameters = body.encodeToJSON()
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: Alamofire.HTTPMethod.init(rawValue: "POST")!.rawValue, requestParameters: convertedParameters, requestEncoding: JSONEncoding.default, requestHeaders: headers, showLoader: false, requestCache: .RequestFromURLNoCache, requestShouldDisableInteraction: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    failureHandler(NSIError(error: response.result.error, response: response.result.value))
                    return
                }
                let nsiResponse = NSIResponse<Any>(JSON: jsonResponse)
                handler(nsiResponse, isLoadedFromCache)
            } else {
                var error = NSIError()
                error.error = response.result.error
                do {
                    let jsonResponse = try JSONSerialization.jsonObject(with: response.data!, options: .allowFragments)
                    error.response = jsonResponse
                } catch {}
                failureHandler(error)
            }
        }
    }

    /**
     Reset Password
     - parameter body: (body) User model
     - parameter handler: completion handler to receive the data
     - parameter failureHandler: failure handler to receive the error objects
     */
    func resetPassword(_ body: UserModel, withHandler handler: @escaping (_ response: NSIResponse<Any>?, _ isResponseFromCache: Bool?) -> Void, failureHandler: @escaping (_ error: NSIError) -> Void) {
        let path = "/api/accounts/resetpassword/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeaders
        let parameters = body.encodeToJSON()
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: Alamofire.HTTPMethod.init(rawValue: "PUT")!.rawValue, requestParameters: convertedParameters, requestEncoding: JSONEncoding.default, requestHeaders: headers, showLoader: false, requestCache: .RequestFromURLNoCache, requestShouldDisableInteraction: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    failureHandler(NSIError(error: response.result.error, response: response.result.value))
                    return
                }
                let nsiResponse = NSIResponse<Any>(JSON: jsonResponse)
                handler(nsiResponse, isLoadedFromCache)
            } else {
                var error = NSIError()
                error.error = response.result.error
                do {
                    let jsonResponse = try JSONSerialization.jsonObject(with: response.data!, options: .allowFragments)
                    error.response = jsonResponse
                } catch {}
                failureHandler(error)
            }
        }
    }

    /**
     Change Password
     - parameter body: (body) User model
     - parameter handler: completion handler to receive the data
     - parameter failureHandler: failure handler to receive the error objects
     */
    func changePassword(_ body: UserModel, withHandler handler: @escaping (_ response: NSIResponse<Any>?, _ isResponseFromCache: Bool?) -> Void, failureHandler: @escaping (_ error: NSIError) -> Void) {
        let path = "/api/accounts/users/changepassword/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeadersUserToken
        let parameters = body.encodeToJSON()
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: Alamofire.HTTPMethod.init(rawValue: "PUT")!.rawValue, requestParameters: convertedParameters, requestEncoding: JSONEncoding.default, requestHeaders: headers, showLoader: false, requestCache: .RequestFromURLNoCache, requestShouldDisableInteraction: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    failureHandler(NSIError(error: response.result.error, response: response.result.value))
                    return
                }
                let nsiResponse = NSIResponse<Any>(JSON: jsonResponse)
                handler(nsiResponse, isLoadedFromCache)
            } else {
                var error = NSIError()
                error.error = response.result.error
                do {
                    let jsonResponse = try JSONSerialization.jsonObject(with: response.data!, options: .allowFragments)
                    error.response = jsonResponse
                } catch {}
                failureHandler(error)
            }
        }
    }

    /**
     Social Registration
     - parameter body: (body) Social User model
     - parameter handler: completion handler to receive the data
     - parameter failureHandler: failure handler to receive the error objects
     */
    func registerViaSocialMedia(_ body: SocialUserModel, withHandler handler: @escaping (_ response: NSIResponse<UserModel>?, _ isResponseFromCache: Bool?) -> Void, failureHandler: @escaping (_ error: NSIError) -> Void) {
        let path = "/api/accounts/socialregister/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeaders
        let parameters = body.encodeToJSON()
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: Alamofire.HTTPMethod.init(rawValue: "POST")!.rawValue, requestParameters: convertedParameters, requestEncoding: JSONEncoding.default, requestHeaders: headers, showLoader: false, requestCache: .RequestFromURLNoCache, requestShouldDisableInteraction: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    failureHandler(NSIError(error: response.result.error, response: response.result.value))
                    return
                }
                let nsiResponse = NSIResponse<UserModel>(JSON: jsonResponse)
                handler(nsiResponse, isLoadedFromCache)
            } else {
                var error = NSIError()
                error.error = response.result.error
                do {
                    let jsonResponse = try JSONSerialization.jsonObject(with: response.data!, options: .allowFragments)
                    error.response = jsonResponse
                } catch {}
                failureHandler(error)
            }
        }
    }

    /**
     Log Out
     - parameter body: (body) Social User model
     - parameter handler: completion handler to receive the data
     - parameter failureHandler: failure handler to receive the error objects
     */
    func logOut(withHandler handler: @escaping (_ response: NSIResponse<Any>?, _ isResponseFromCache: Bool?) -> Void, failureHandler: @escaping (_ error: NSIError) -> Void) {
        let path = "/api/accounts/signout/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeadersUserToken
        let nillableParameters: [String: Any?] = [:]
        let parameters = APIHelper.rejectNil(source: nillableParameters)
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: Alamofire.HTTPMethod.init(rawValue: "PUT")!.rawValue, requestParameters: convertedParameters, requestEncoding: JSONEncoding.default, requestHeaders: headers, showLoader: false, requestCache: .RequestFromURLNoCache, requestShouldDisableInteraction: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    failureHandler(NSIError(error: response.result.error, response: response.result.value))
                    return
                }
                let nsiResponse = NSIResponse<Any>(JSON: jsonResponse)
                handler(nsiResponse, isLoadedFromCache)
            } else {
                var error = NSIError()
                error.error = response.result.error
                do {
                    let jsonResponse = try JSONSerialization.jsonObject(with: response.data!, options: .allowFragments)
                    error.response = jsonResponse
                } catch {}
                failureHandler(error)
            }
        }
    }

    /**
     Change Notification Settings
     - parameter toAllow: Allow/Disallow
     - parameter handler: completion handler to receive the data
     - parameter failureHandler: failure handler to receive the error objects
     */
    func changeNotificationSettings(toAllow: Int, withHandler handler: @escaping (_ response: NSIResponse<Any>?, _ isResponseFromCache: Bool?) -> Void, failureHandler: @escaping (_ error: NSIError) -> Void) {

        let path = "/api/accounts/notification_setting/\(toAllow)/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeadersUserToken

        let nillableParameters: [String: Any?] = [:]
        let parameters = APIHelper.rejectNil(source: nillableParameters)
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)

        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: Alamofire.HTTPMethod.init(rawValue: "PUT")!.rawValue, requestParameters: convertedParameters, requestEncoding: URLEncoding.default, requestHeaders: headers, showLoader: false, requestCache: .RequestFromURLNoCache, requestShouldDisableInteraction: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    failureHandler(NSIError(error: response.result.error, response: response.result.value))
                    return
                }
                let nsiResponse = NSIResponse<Any>(JSON: jsonResponse)
                handler(nsiResponse, isLoadedFromCache)
            } else {
                var error = NSIError()
                error.error = response.result.error
                do {
                    let jsonResponse = try JSONSerialization.jsonObject(with: response.data!, options: .allowFragments)
                    error.response = jsonResponse
                } catch {}
                failureHandler(error)
            }
        }
    }
}
