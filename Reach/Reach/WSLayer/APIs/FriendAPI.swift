//
// FriendAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire

// swiftlint:disable function_parameter_count
protocol FriendAPI {

}
extension FriendAPI {
    /**
     List Friends
     - parameter handler: completion handler to receive the data
     - parameter failureHandler: failure handler to receive the error objects
     */
    func listAllFriends(_ search: String = "", page: Int, withHandler handler: @escaping (_ response: NSIResponse<PaginationModel>?, _ isResponseFromCache: Bool?) -> Void, failureHandler: @escaping (_ error: NSIError) -> Void) {
        let path = "/api/accounts/listfriend/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeadersUserToken
        let nillableParameters: [String: Any?] = [
            "search": search,
            "page": page
        ]
        let parameters = APIHelper.rejectNil(source: nillableParameters)
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: Alamofire.HTTPMethod.init(rawValue: "GET")!.rawValue, requestParameters: convertedParameters, requestEncoding: URLEncoding.default, requestHeaders: headers, showLoader: false, requestCache: .RequestFromURLNoCache, requestShouldDisableInteraction: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    failureHandler(NSIError(error: response.result.error, response: response.result.value))
                    return
                }
                let nsiResponse = NSIResponse<PaginationModel>(JSON: jsonResponse)
                handler(nsiResponse, isLoadedFromCache)
            } else {
                var error = NSIError()
                error.error = response.result.error
                do {
                    let jsonResponse = try JSONSerialization.jsonObject(with: response.data!, options: .allowFragments)
                    error.response = jsonResponse
                } catch {}
                failureHandler(error)
            }
        }
    }

    /**
     List Friends In Respect To Event
     - parameter handler: completion handler to receive the data
     - parameter failureHandler: failure handler to receive the error objects
     */
    func listAllFriendsInRespectToEvent(_ search: String = "", eventID: Int, page: Int, withHandler handler: @escaping (_ response: NSIResponse<PaginationModel>?, _ isResponseFromCache: Bool?) -> Void, failureHandler: @escaping (_ error: NSIError) -> Void) {
        let path = "/api/event/list_friends_recommendation/\(eventID)/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeadersUserToken
        let nillableParameters: [String: Any?] = [
            "search": search,
            "page": page
        ]
        let parameters = APIHelper.rejectNil(source: nillableParameters)
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: Alamofire.HTTPMethod.init(rawValue: "GET")!.rawValue, requestParameters: convertedParameters, requestEncoding: URLEncoding.default, requestHeaders: headers, showLoader: false, requestCache: .RequestFromURLNoCache, requestShouldDisableInteraction: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    failureHandler(NSIError(error: response.result.error, response: response.result.value))
                    return
                }
                let nsiResponse = NSIResponse<PaginationModel>(JSON: jsonResponse)
                handler(nsiResponse, isLoadedFromCache)
            } else {
                var error = NSIError()
                error.error = response.result.error
                do {
                    let jsonResponse = try JSONSerialization.jsonObject(with: response.data!, options: .allowFragments)
                    error.response = jsonResponse
                } catch {}
                failureHandler(error)
            }
        }
    }

    /**
     List all users
     - parameter search: (path) Search String.
     - parameter handler: completion handler to receive the data
     - parameter failureHandler: failure handler to receive the error objects
     */
    func listAllUsers(_ search: String, page: Int, withHandler handler: @escaping (_ response: NSIResponse<PaginationModel>?, _ isResponseFromCache: Bool?) -> Void, failureHandler: @escaping (_ error: NSIError) -> Void) {
        let path = "/api/accounts/getallusers/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeadersUserToken
        let nillableParameters: [String: Any?] = [
            "search": search,
            "page": page
        ]
        let parameters = APIHelper.rejectNil(source: nillableParameters)
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: Alamofire.HTTPMethod.init(rawValue: "GET")!.rawValue, requestParameters: convertedParameters, requestEncoding: URLEncoding.default, requestHeaders: headers, showLoader: false, requestCache: .RequestFromURLNoCache, requestShouldDisableInteraction: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    failureHandler(NSIError(error: response.result.error, response: response.result.value))
                    return
                }
                let nsiResponse = NSIResponse<PaginationModel>(JSON: jsonResponse)
                handler(nsiResponse, isLoadedFromCache)
            } else {
                var error = NSIError()
                error.error = response.result.error
                do {
                    let jsonResponse = try JSONSerialization.jsonObject(with: response.data!, options: .allowFragments)
                    error.response = jsonResponse
                } catch {}
                failureHandler(error)
            }
        }
    }

    /**
     List all users In Respect To Event(
     - parameter search: (path) Search String.
     - parameter handler: completion handler to receive the data
     - parameter failureHandler: failure handler to receive the error objects
     */
    func listAllUsersInRespectToEvent(_ search: String, eventID: Int, page: Int, withHandler handler: @escaping (_ response: NSIResponse<PaginationModel>?, _ isResponseFromCache: Bool?) -> Void, failureHandler: @escaping (_ error: NSIError) -> Void) {
        let path = "/api/event/userlisting/\(eventID)/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeadersUserToken
        let nillableParameters: [String: Any?] = [
            "search": search,
            "page": page
        ]
        let parameters = APIHelper.rejectNil(source: nillableParameters)
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: Alamofire.HTTPMethod.init(rawValue: "GET")!.rawValue, requestParameters: convertedParameters, requestEncoding: URLEncoding.default, requestHeaders: headers, showLoader: false, requestCache: .RequestFromURLNoCache, requestShouldDisableInteraction: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    failureHandler(NSIError(error: response.result.error, response: response.result.value))
                    return
                }
                let nsiResponse = NSIResponse<PaginationModel>(JSON: jsonResponse)
                handler(nsiResponse, isLoadedFromCache)
            } else {
                var error = NSIError()
                error.error = response.result.error
                do {
                    let jsonResponse = try JSONSerialization.jsonObject(with: response.data!, options: .allowFragments)
                    error.response = jsonResponse
                } catch {}
                failureHandler(error)
            }
        }
    }

    /**
     UnFriend
     - parameter friendID: friendID
     - parameter handler: completion handler to receive the data
     - parameter failureHandler: failure handler to receive the error objects
     */
    func unfriend(_ friendID: Int, withHandler handler: @escaping (_ response: NSIResponse<Any>?, _ isResponseFromCache: Bool?) -> Void, failureHandler: @escaping (_ error: NSIError) -> Void) {

        let path = "/api/accounts/unfriend/\(friendID)/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeadersUserToken

        let nillableParameters: [String: Any?] = [:]
        let parameters = APIHelper.rejectNil(source: nillableParameters)
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)

        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: Alamofire.HTTPMethod.init(rawValue: "PUT")!.rawValue, requestParameters: convertedParameters, requestEncoding: URLEncoding.default, requestHeaders: headers, showLoader: false, requestCache: .RequestFromURLNoCache, requestShouldDisableInteraction: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    failureHandler(NSIError(error: response.result.error, response: response.result.value))
                    return
                }
                let nsiResponse = NSIResponse<Any>(JSON: jsonResponse)
                handler(nsiResponse, isLoadedFromCache)
            } else {
                var error = NSIError()
                error.error = response.result.error
                do {
                    let jsonResponse = try JSONSerialization.jsonObject(with: response.data!, options: .allowFragments)
                    error.response = jsonResponse
                } catch {}
                failureHandler(error)
            }
        }
    }

    /**
     Accept Friend Request
     - parameter friendID: friendID
     - parameter handler: completion handler to receive the data
     - parameter failureHandler: failure handler to receive the error objects
     */
    func acceptFriendRequest(_ friendID: Int, withHandler handler: @escaping (_ response: NSIResponse<Any>?, _ isResponseFromCache: Bool?) -> Void, failureHandler: @escaping (_ error: NSIError) -> Void) {

        let path = "/api/accounts/acceptrequest/\(friendID)/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeadersUserToken

        let nillableParameters: [String: Any?] = [:]
        let parameters = APIHelper.rejectNil(source: nillableParameters)
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)

        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: Alamofire.HTTPMethod.init(rawValue: "PUT")!.rawValue, requestParameters: convertedParameters, requestEncoding: URLEncoding.default, requestHeaders: headers, showLoader: false, requestCache: .RequestFromURLNoCache, requestShouldDisableInteraction: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    failureHandler(NSIError(error: response.result.error, response: response.result.value))
                    return
                }
                let nsiResponse = NSIResponse<Any>(JSON: jsonResponse)
                handler(nsiResponse, isLoadedFromCache)
            } else {
                var error = NSIError()
                error.error = response.result.error
                do {
                    let jsonResponse = try JSONSerialization.jsonObject(with: response.data!, options: .allowFragments)
                    error.response = jsonResponse
                } catch {}
                failureHandler(error)
            }
        }
    }

    /**
     Send Friend Request
     - parameter friendID: friendID
     - parameter handler: completion handler to receive the data
     - parameter failureHandler: failure handler to receive the error objects
     */
    func sendFriendRequest(_ friendID: Int, withHandler handler: @escaping (_ response: NSIResponse<Any>?, _ isResponseFromCache: Bool?) -> Void, failureHandler: @escaping (_ error: NSIError) -> Void) {

        let path = "/api/accounts/sendrequest/\(friendID)/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeadersUserToken

        let nillableParameters: [String: Any?] = [:]
        let parameters = APIHelper.rejectNil(source: nillableParameters)
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)

        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: Alamofire.HTTPMethod.init(rawValue: "POST")!.rawValue, requestParameters: convertedParameters, requestEncoding: URLEncoding.default, requestHeaders: headers, showLoader: false, requestCache: .RequestFromURLNoCache, requestShouldDisableInteraction: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    failureHandler(NSIError(error: response.result.error, response: response.result.value))
                    return
                }
                let nsiResponse = NSIResponse<Any>(JSON: jsonResponse)
                handler(nsiResponse, isLoadedFromCache)
            } else {
                var error = NSIError()
                error.error = response.result.error
                do {
                    let jsonResponse = try JSONSerialization.jsonObject(with: response.data!, options: .allowFragments)
                    error.response = jsonResponse
                } catch {}
                failureHandler(error)
            }
        }
    }

    /**
     List all invitations
     - parameter eventID: eventID
     - parameter pageNum: pageNum
     - parameter handler: completion handler to receive the data
     - parameter failureHandler: failure handler to receive the error objects
     */
    func listAllInvitations(_ eventID: Int, page: Int, search: String, withHandler handler: @escaping (_ response: NSIResponse<PaginationModel>?, _ isResponseFromCache: Bool?) -> Void, failureHandler: @escaping (_ error: NSIError) -> Void) {

        let path = "/api/event/list_invitations/\(eventID)/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeadersUserToken

        let nillableParameters: [String: Any?] = [
            "search": search,
            "page": page
        ]
        let parameters = APIHelper.rejectNil(source: nillableParameters)
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)

        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: Alamofire.HTTPMethod.init(rawValue: "GET")!.rawValue, requestParameters: convertedParameters, requestEncoding: URLEncoding.default, requestHeaders: headers, showLoader: false, requestCache: .RequestFromURLNoCache, requestShouldDisableInteraction: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    failureHandler(NSIError(error: response.result.error, response: response.result.value))
                    return
                }
                let nsiResponse = NSIResponse<PaginationModel>(JSON: jsonResponse)
                handler(nsiResponse, isLoadedFromCache)
            } else {
                var error = NSIError()
                error.error = response.result.error
                do {
                    let jsonResponse = try JSONSerialization.jsonObject(with: response.data!, options: .allowFragments)
                    error.response = jsonResponse
                } catch {}
                failureHandler(error)
            }
        }
    }

    /**
     Sync Contacts
     - parameter handler: completion handler to receive the data
     - parameter failureHandler: failure handler to receive the error objects
     */
    func syncContacts(body: [String], withHandler handler: @escaping (_ response: NSIResponse<Any>?, _ isResponseFromCache: Bool?) -> Void, failureHandler: @escaping (_ error: NSIError) -> Void) {

        let path = "/api/accounts/syncphonebook/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeadersUserToken

        let nillableParameters: [String: Any?] = [
            "phonebook": body
        ]

        let parameters = APIHelper.rejectNil(source: nillableParameters)
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)

        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: Alamofire.HTTPMethod.init(rawValue: "PUT")!.rawValue, requestParameters: convertedParameters, requestEncoding: JSONEncoding.default, requestHeaders: headers, showLoader: false, requestCache: .RequestFromURLNoCache, requestShouldDisableInteraction: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    failureHandler(NSIError(error: response.result.error, response: response.result.value))
                    return
                }
                let nsiResponse = NSIResponse<Any>(JSON: jsonResponse)
                handler(nsiResponse, isLoadedFromCache)
            } else {
                var error = NSIError()
                error.error = response.result.error
                do {
                    let jsonResponse = try JSONSerialization.jsonObject(with: response.data!, options: .allowFragments)
                    error.response = jsonResponse
                } catch {}
                failureHandler(error)
            }
        }
    }
}
