//
// AccessTokenAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire

let appGrantType = "client_credentials"
let userGrantType = "password"

/// Keys for service
let clientIdKey = "client_id"
let clientSecretkey = "client_secret"
let grantTypeKey = "grant_type"
let userNameKey = "username"
let passwordKey = "password"
// swiftlint:disable function_parameter_count
protocol AccessTokenAPI {

}
extension AccessTokenAPI {
    /**
     - parameter clientId: (form) Client ID for oath.
     - parameter clientSecret: (form) Client Secret for oath.
     - parameter grantType: (form) Grant Type for oath.
     - parameter username: (form) User Name for oath.
     - parameter password: (form) Password for oath.
     - parameter handler: completion handler to receive the data
     */
    func getToken(withHandler handler: @escaping (_ responseData: AccessToken?) -> Void) {
                let path = "/o/token/"
                let URLString = Configuration.BaseURL() + path
                let headers = Configuration.customHeadersToken
                var nillableParameters: [String: Any?] = [:]
                nillableParameters[grantTypeKey] = Configuration.grantType()
                nillableParameters[userNameKey] = Configuration.userName().encodeToJSON()
                nillableParameters[passwordKey] = Configuration.userPassowrd().encodeToJSON()
                nillableParameters[clientIdKey] = Configuration.clientId().encodeToJSON()
                nillableParameters[clientSecretkey] = Configuration.clientSecret().encodeToJSON()

                let parameters = APIHelper.rejectNil(source: nillableParameters)
                let convertedParameters = APIHelper.convertBoolToString(source: parameters)
                let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: "POST", requestParameters: convertedParameters, requestEncoding: URLEncoding.default, requestHeaders: headers, showLoader: false)
                JSONRequest(requestBuilder: requestBuilder) { (response, _) in
                    if response.result.isSuccess {
                        guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                            handler(nil)
                            return
                        }
                        let accessToken = AccessToken(JSON: jsonResponse)
                        handler(accessToken)
                    } else {
                        guard let jsonResponse = response.result.value else {
                            handler(nil)
                            return
                        }
                        print("failed \(jsonResponse)")
                        handler(nil)
                    }
                }
    }
    
    /**
     Check App Version Update
     - parameter app_version_code: (path) check App version
     - parameter os: App type
     - parameter handler: completion handler to receive the data
     Url : http://alt-qc.netsolutions.in/alt-api/public/appVersion?app_version_code=2&os=1
     */
    func checkAppVersionUpdate( appVersion: Int, withHandler handler: @escaping (_ responseData: NSIResponse<VersionUpdate>?) -> Void) {
        let path = "/api/app/appversion/"
        let URLString = Configuration.BaseURL() + path
        var tokenPublic = ""
        if let tokenObj = KeychainWrapper.standard.object(forKey: AppConstants.appTokenKeyChain) {
            if let appTokenObj = tokenObj as? AccessToken, let token = appTokenObj.accessToken {
                tokenPublic = "Bearer \(token)"
                print("accessToken token: \(token)")
            }}
        let headers: [String: String]?  = ["Authorization": tokenPublic]
        //        let nillableParameters: [String: Any?] = ["app_version_code": appVersion, "device_type": Enums.DeviceType.iOS.rawValue]
        let nillableParameters: [String: Any?] = ["app_version": appVersion]
        let parameters = APIHelper.rejectNil(source: nillableParameters)
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: "POST", requestParameters: convertedParameters, requestHeaders: headers, showLoader: false)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    handler(NSIResponse<VersionUpdate>(.nilResponse))
                    return
                }
                print("App update detail are:- \(jsonResponse)")
                var nsiResponse = NSIResponse<VersionUpdate>(JSON: jsonResponse)
                nsiResponse?.hasCache = isLoadedFromCache
                handler(nsiResponse)
            } else {
                handler(NSIResponse<VersionUpdate>(.invalidStatus))
            }
        }
    }
}
